spring.profiles= prod

spring.application.name= myy-liveplay
eureka.client.serviceUrl.defaultZone= http://moyuan:moyuan123@localhost:8010/eureka/

# 配置默认数据源，并使用 阿里连接池
spring.datasource.type= com.alibaba.druid.pool.DruidDataSource
spring.datasource.url= jdbc:mysql://sh-cdb-mbj6mdpc.sql.tencentcdb.com:61732/db_river?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
spring.datasource.username= ssr
spring.datasource.password= myyun@r@srr
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/db_warn?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
#spring.datasource.username=root
#spring.datasource.password=123456
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.max-active= 200
spring.datasource.max-idle= 80
spring.datasource.min-idle= 80
spring.datasource.initial-size= 100


## Redis 配置
## Redis数据库索引（默认为0）
spring.redis.database=0
## Redis服务器地址
spring.redis.host=127.0.0.1
## Redis服务器连接端口
spring.redis.port=6379
## Redis服务器连接密码（默认为空）
spring.redis.password=123456
## 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=8
## 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1
## 连接池中的最大空闲连接
#spring.redis.jedis.pool.max-idle=8
## 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
## 连接超时时间（毫秒）
spring.redis.timeout=5000

######JPA 配置#####
# 声明数据库
spring.jpa.database=mysql
# 是否显示SQL语句
spring.jpa.show-sql = true
# Hibernate 自动DDL 操作
# create 每次加载hibernate时都会删除上一次的生成的表
# create-drop 每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除
# update 最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库）
spring.jpa.hibernate.ddl-auto=update
#配置方言
spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect

#在application.properties文件中引入日志配置文件
#=====================================  log  =============================
log4j.rootLogger=DEBUG,CONSOLE,A1
log4j.addivity.org.apache=true

# 应用于控制台

log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.Threshold=DEBUG 
log4j.appender.CONSOLE.Target=System.out 
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout 
log4j.appender.CONSOLE.layout.ConversionPattern=[framework] %d - %c -%-4r[%t] %-5p %c %x - %m%n 
#log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]n%c[CATEGORY]%n%m[MESSAGE]%n%n

#应用于文件

log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.File=log/file.log 
log4j.appender.FILE.Append=false 
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout 
log4j.appender.FILE.layout.ConversionPattern=[framework] %d - %c -%-4r[%t] %-5p %c %x - %m%n 
# Use this layout for LogFactor 5 analysis

# 应用于文件回滚

log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender
log4j.appender.ROLLING_FILE.Threshold=ERROR 
log4j.appender.ROLLING_FILE.File=log/rolling.log  //文件位置,也可以用变量${java.home}、rolling.log
log4j.appender.ROLLING_FILE.Append=true      //true:添加 false:覆盖
log4j.appender.ROLLING_FILE.MaxFileSize=10MB   //文件最大尺寸
log4j.appender.ROLLING_FILE.MaxBackupIndex=1  //备份数
log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout 
log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c-%-4r [%t] %-5p %c %x - %m%n 
#应用于socket
log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender
log4j.appender.SOCKET.RemoteHost=localhost 
log4j.appender.SOCKET.Port=10086 
log4j.appender.SOCKET.LocationInfo=true 
# Set up for Log Facter 5
log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout 
log4j.appender.SOCET.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n
# LogFactor 5 Appender
log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender 
log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000

